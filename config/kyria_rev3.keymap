/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */

/ {
    macros {
        umlaut_a_small: umlaut_a_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp LS(C) &kp KP_NUMBER_4 &kp SPACE>;
            label = "UMLAUT_A_SMALL";
        };

        umlaut_a_big: umlaut_a_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp LS(E) &kp KP_NUMBER_4 &kp SPACE>;
            label = "UMLAUT_A_UP";
        };

        umlaut_o_big: umlaut_o_big {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp LS(D) &kp KP_NUMBER_6 &kp SPACE>;
            label = "UMLAUT_O_BIG";
        };

        umlaut_o_small: umlaut_o_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp LS(F) &kp KP_NUMBER_6 &kp SPACE>;
            label = "UMLAUT_O_SMALL";
        };

        umlaut_u_small: umlaut_u_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp LS(F) &kp LS(C) &kp SPACE>;
            label = "UMLAUT_U_SMALL";
        };

        umlaut_u_big: umlaut_u_big {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp LS(D) &kp LS(C) &kp SPACE>;
            label = "UMLAUT_U_BIG";
        };

        umlaut_sz_small: umlaut_sz_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp LS(U) &kp LS(D) &kp LS(F) &kp SPACE>;
            label = "UMLAUT_SZ_SMALL";
        };

        umlaut_sz_big: umlaut_sz_big {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp KP_NUMBER_1 &kp LS(E) &kp KP_NUMBER_9 &kp LS(E) &kp SPACE>;
            label = "UMLAUT_SZ_BIG";
        };
    };

    behaviors {
        home_row: home_row {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        tap_or_layer: tap_or_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_OR_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        thumb_mod: thumb_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        umlaut_a: umlaut_a {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_A";
            bindings = <&umlaut_a_big>, <&umlaut_a_small>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "balanced";
        };

        umlaut_o: umlaut_o {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_O";
            bindings = <&umlaut_o_big>, <&umlaut_o_small>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "balanced";
        };

        umlaut_u: umlaut_u {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_U";
            bindings = <&umlaut_u_big>, <&umlaut_u_small>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "balanced";
        };

        umlaut_sz: umlaut_sz {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_SZ";
            bindings = <&umlaut_sz_big>, <&umlaut_sz_small>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | LAYER 1 | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
&kp ESCAPE        &kp Q                 &kp W                 &kp E                     &kp R                   &kp T                                                                                                                      &kp Y       &kp U                    &kp I                      &kp O                 &kp P                          &kp MINUS
&kp GRAVE         &home_row LEFT_GUI A  &home_row LEFT_ALT S  &home_row LEFT_CONTROL D  &home_row LEFT_SHIFT F  &kp G                                                                                                                      &kp H       &home_row RIGHT_SHIFT J  &home_row RIGHT_CONTROL K  &home_row LEFT_ALT L  &home_row RIGHT_GUI SEMICOLON  &kp BACKSLASH
&kp LEFT_CONTROL  &kp Z                 &kp X                 &kp C                     &kp V                   &kp B         &mo 1                  &kp LSHFT                  &mo 2                              &kp LSHFT               &kp N       &kp M                    &kp COMMA                  &kp DOT               &kp FSLH                       &home_row RC(RIGHT_GUI) SINGLE_QUOTE
                                                              &kp LEFT_CONTROL          &kp LEFT_ALT            &kp LEFT_GUI  &tap_or_layer 2 SPACE  &thumb_mod LEFT_SHIFT TAB  &thumb_mod LC(LEFT_GUI) BACKSPACE  &tap_or_layer 1 RETURN  &kp DELETE  &kp LEFT_BRACKET         &kp RIGHT_BRACKET
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        num+sym {
            bindings = <
&trans  &kp NUMBER_6  &kp N7        &kp N8           &kp N9        &kp N0                                  &umlaut_a 0 0     &umlaut_o 0 0      &umlaut_u 0 0         &umlaut_sz 0 0         &kp MINUS  &kp EQUAL
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3     &kp NUMBER_4  &kp N5                                  &kp LESS_THAN     &kp GREATER_THAN   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans     &trans
&trans  &kp PLUS      &kp MINUS     &kp KP_MULTIPLY  &trans        &trans  &trans  &trans  &trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans     &trans
                                    &trans           &trans        &trans  &trans  &trans  &trans  &trans  &trans            &trans             &trans
            >;
        };

        movement {
            bindings = <
&bt BT_CLR  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4                                  &trans          &trans         &trans        &trans     &trans  &trans
&trans      &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4                                   &kp LEFT_ARROW  &kp DOWN       &kp UP_ARROW  &kp RIGHT  &trans  &trans
&trans      &trans         &trans         &trans         &trans         &trans         &trans  &trans  &trans  &trans  &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP   &kp END    &trans  &trans
                                          &trans         &trans         &trans         &trans  &trans  &trans  &trans  &trans          &trans         &trans
            >;
        };

        adjust {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |      |      |      |      |      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |

            bindings = <
&trans  &trans  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &bt BT_SEL 3  &bt BT_SEL 4  &trans                                        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                            &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
