/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */

/ {
    macros {
        umlaut_a_small: umlaut_a_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp LS(C) &kp KP_NUMBER_4 &kp SPACE>;
            label = "UMLAUT_A_SMALL";
        };

        umlaut_a_big: umlaut_a_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp LS(E) &kp KP_NUMBER_4 &kp SPACE>;
            label = "UMLAUT_A_UP";
        };

        umlaut_o_big: umlaut_o_big {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp LS(D) &kp KP_NUMBER_6 &kp SPACE>;
            label = "UMLAUT_O_BIG";
        };

        umlaut_o_small: umlaut_o_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp LS(F) &kp KP_NUMBER_6 &kp SPACE>;
            label = "UMLAUT_O_SMALL";
        };

        umlaut_u_small: umlaut_u_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp LS(F) &kp LS(C) &kp SPACE>;
            label = "UMLAUT_U_SMALL";
        };

        umlaut_u_big: umlaut_u_big {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp LS(D) &kp LS(C) &kp SPACE>;
            label = "UMLAUT_U_BIG";
        };

        umlaut_sz_small: umlaut_sz_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp LS(U) &kp LS(D) &kp LS(F) &kp SPACE>;
            label = "UMLAUT_SZ_SMALL";
        };

        umlaut_sz_big: umlaut_sz_big {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp KP_NUMBER_1 &kp LS(E) &kp KP_NUMBER_9 &kp LS(E) &kp SPACE>;
            label = "UMLAUT_SZ_BIG";
        };
    };

    behaviors {
        umlaut_a: umlaut_a {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_A";
            bindings = <&umlaut_a_big>, <&umlaut_a_small>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "balanced";
        };

        umlaut_o: umlaut_o {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_O";
            bindings = <&umlaut_o_big>, <&umlaut_o_small>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "balanced";
        };

        umlaut_u: umlaut_u {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_U";
            bindings = <&umlaut_u_big>, <&umlaut_u_small>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "balanced";
        };

        umlaut_sz: umlaut_sz {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_SZ";
            bindings = <&umlaut_sz_big>, <&umlaut_sz_small>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "balanced";
        };

        esc_adjust: esc_adjust {
            compatible = "zmk,behavior-tap-dance";
            label = "ESC_ADJUST";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE>, <&none>, <&tog 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | LAYER 1 | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
&esc_adjust       &kp Q  &kp W  &kp E             &kp R         &kp T                                                                                    &kp Y                 &kp U             &kp I              &kp O    &kp P     &kp MINUS
&kp GRAVE         &kp A  &kp S  &kp D             &kp F         &kp G                                                                                    &kp H                 &kp J             &kp K              &kp L    &kp SEMI  &kp BACKSLASH
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C             &kp V         &kp B         &sl 2        &sl 1               &sl 2                       &sl 1         &kp N                 &kp M             &kp COMMA          &kp DOT  &kp FSLH  &mt RC(RIGHT_GUI) SINGLE_QUOTE
                                &sk LEFT_CONTROL  &sk LEFT_ALT  &sk LEFT_GUI  &lt 2 SPACE  &mt LEFT_SHIFT TAB  &mt LC(LEFT_GUI) BACKSPACE  &lt 1 RETURN  &sk LG(LEFT_CONTROL)  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        raise {
            bindings = <
&trans      &kp EXCL      &kp AT        &kp POUND     &kp DOLLAR    &kp PERCENT                                  &kp CARET         &kp AMPS           &kp ASTRK             &trans                 &kp MINUS  &kp EQUAL
&kp COMMA   &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0                                       &kp LESS_THAN     &kp GREATER_THAN   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMI   &kp BACKSLASH
&kp PERIOD  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5       &trans  &trans  &trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SLASH  &kp SINGLE_QUOTE
                                        &trans        &trans        &trans       &trans  &trans  &trans  &trans  &trans            &trans             &trans
            >;
        };

        lower {
            bindings = <
&trans  &kp LC(LG(LA(TAB)))       &trans                    &trans                    &trans                    &trans                                             &umlaut_a 0 0   &umlaut_o 0 0  &umlaut_u 0 0  &umlaut_sz 0 0  &trans             &trans
&trans  &kp LG(LS(LC(NUMBER_1)))  &kp LS(LG(LC(NUMBER_2)))  &kp LS(LG(LC(NUMBER_3)))  &kp LS(LG(LC(NUMBER_4)))  &kp LG(LS(LC(S)))                                  &kp LEFT_ARROW  &kp DOWN       &kp UP_ARROW   &kp RIGHT       &trans             &trans
&trans  &kp LG(LC(NUMBER_1))      &kp LG(LC(NUMBER_2))      &kp LG(LC(NUMBER_3))      &kp LG(LC(NUMBER_4))      &kp LG(LC(S))      &trans  &trans  &trans  &trans  &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP    &kp END         &kt LG(LC(SLASH))  &trans
                                                            &trans                    &trans                    &trans             &trans  &trans  &trans  &trans  &trans          &trans         &trans
            >;
        };

        adjust {
            bindings = <
&tog 3      &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4                                  &kp C_BRIGHTNESS_MINIMUM  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_MAXIMUM  &kp C_BRIGHTNESS_AUTO  &trans
&bt BT_CLR  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4                                   &kp C_PREV                &kp C_PLAY_PAUSE      &kp C_STOP            &kp C_NEXT                &kp C_VOL_DN           &kp C_VOLUME_UP
&trans      &trans         &trans         &trans         &trans         &trans         &trans  &trans  &trans  &trans  &trans                    &trans                &trans                &trans                    &trans                 &trans
                                          &trans         &trans         &trans         &trans  &trans  &trans  &trans  &trans                    &trans                &trans
            >;
        };
    };
};
