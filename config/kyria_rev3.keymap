/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */

/ {
    macros {
        umlaut_a_up: umlaut_a_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp C &kp KP_NUMBER_4 &kp SPACE>;
            label = "UMLAUT_A_UP";
        };

        umlaut_a_small: umlaut_a_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp E &kp KP_NUMBER_4 &kp SPACE>;
            label = "UMLAUT_A_small";
        };

        umlaut_o_up: umlaut_o_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp D &kp KP_NUMBER_6 &kp SPACE>;
            label = "UMLAUT_O_UP";
        };

        umlaut_o_small: umlaut_o_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp F &kp KP_NUMBER_6 &kp SPACE>;
            label = "UMLAUT_O_SMALL";
        };

        umlaut_u_small: umlaut_u_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp F &kp C &kp SPACE>;
            label = "UMLAUT_U_SMALL";
        };

        umlaut_u_up: umlaut_u_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp D &kp C &kp SPACE>;
            label = "UMLAUT_U_UP";
        };

        umlaut_sz_small: umlaut_sz_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp U &kp D &kp F &kp SPACE>;
            label = "UMLAUT_SZ_SMALL";
        };

        umlaut_sz_up: umlaut_sz_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp KP_NUMBER_1 &kp E &kp KP_NUMBER_9 &kp E &kp SPACE>;
            label = "UMLAUT_SZ_UP";
        };

        bt_sel_os: bt_os {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &to MACRO_PLACEHOLDER &macro_param_2to2 &bt BT_SEL MACRO_PLACEHOLDER>;
            label = "BT_OS";
        };

        umlaut_mac_all: umlaut_mac {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp LA(U) &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "UMLAUT_MAC";
        };
    };

    behaviors {
        umlaut_a: umlaut_a {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_A";
            bindings = <&umlaut_a_up>, <&umlaut_a_small>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        umlaut_o: umlaut_o {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_O";
            bindings = <&umlaut_o_up>, <&umlaut_o_small>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        umlaut_u: umlaut_u {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_U";
            bindings = <&umlaut_u_up>, <&umlaut_u_small>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        umlaut_sz: umlaut_sz {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_SZ";
            bindings = <&umlaut_sz_up>, <&umlaut_sz_small>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        esc_adjust: esc_adjust {
            compatible = "zmk,behavior-tap-dance";
            label = "ESC_ADJUST";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE>, <&none>, <&sl 5>;
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 34 35 36 37 38 39>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        mt_repeat: mt_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "Mod/tap repeat";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
        };

        umlaut_mac: umlaut_mac {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_MAC";
            bindings = <&umlaut_mac_all>, <&umlaut_mac_all>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | LAYER 1 | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
&lt 5 ESCAPE            &kp Q            &kp W            &kp E                &kp R              &kp T                                                                                    &kp Y     &kp U               &kp I                 &kp O            &kp P                     &kp MINUS
&mt LEFT_SHIFT TAB      &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G                                                                                    &kp H     &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr LEFT_ALT L  &hmr RIGHT_GUI SEMICOLON  &kp SINGLE_QUOTE
&mt LEFT_CONTROL GRAVE  &kp Z            &kp X            &kp C                &kp V              &kp B     &kp K_MUTE   &kp C_AC_COPY       &kp LC(V)                      &kp C_AC_HOME  &kp N     &kp M               &kp COMMA             &kp DOT          &kp FSLH                  &mt RIGHT_GUI BACKSLASH
                                                          &sk LCMD             &sk LEFT_ALT       &sk LCMD  &lt 2 SPACE  &mt LEFT_SHIFT TAB  &mt_repeat LEFT_ALT BACKSPACE  &lt 4 ENTER    &sk RGUI  &kp LEFT_BRACKET    &kp RIGHT_BRACKET
            >;

            sensor-bindings =
                <&inc_dec_kp K_VOL_UP C_VOL_DN>,
                <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        base-mac {
            bindings = <
&trans  &trans               &trans           &trans           &trans             &trans                                     &trans  &trans              &trans            &trans           &trans                        &trans
&trans  &hml LEFT_CONTROL A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml LEFT_SHIFT F  &trans                                     &trans  &hmr RIGHT_SHIFT J  &hmr RIGHT_GUI K  &hmr LEFT_ALT L  &hmr RIGHT_CONTROL SEMICOLON  &trans
&trans  &trans               &trans           &trans           &trans             &trans  &trans  &trans  &kp LG(V)  &trans  &trans  &trans              &trans            &trans           &trans                        &trans
                                              &trans           &trans             &trans  &trans  &trans  &trans     &trans  &trans  &trans              &trans
            >;
        };

        lower {
            bindings = <
&trans                   &trans                                &trans                                &trans                                        &trans                                  &trans                                                                 &umlaut_a 0 0   &umlaut_o 0 0  &umlaut_u 0 0  &umlaut_sz 0 0  &trans           &trans
&trans                   &mt_repeat LA(LG(LEFT)) LS(LG(LEFT))  &mt_repeat LA(LG(DOWN)) LG(LS(DOWN))  &mt_repeat LA(LG(UP_ARROW)) LG(LS(UP_ARROW))  &mt_repeat LG(LA(RIGHT)) LG(LS(RIGHT))  &trans                                                                 &kp LEFT_ARROW  &kp DOWN       &kp UP_ARROW   &kp RIGHT       &trans           &trans
&mt LG(LS(TAB)) LG(TAB)  &mt LG(LS(NUMBER_1)) LG(NUMBER_1)     &mt LG(LS(NUMBER_2)) LG(NUMBER_2)     &mt LG(LS(NUMBER_3)) LG(NUMBER_3)             &mt LG(LS(NUMBER_4)) LG(NUMBER_4)       &mt LG(LS(S)) LG(S)  &trans  &trans  &kp LG(LS(T))  &trans             &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP    &kp END         &kp PRINTSCREEN  &trans
                                                                                                     &trans                                        &trans                                  &trans               &trans  &trans  &trans         &kp RG(LS(ENTER))  &trans          &trans         &trans
            >;
        };

        lower-mac {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                  &umlaut_mac LS(A) A  &umlaut_mac LS(O) O  &umlaut_mac LS(U) U  &kp LA(S)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                  &trans               &trans               &trans               &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans               &trans               &trans               &trans     &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans               &trans               &trans
            >;
        };

        raise {
            bindings = <
&trans                 &kp EXCL      &kp AT        &kp POUND     &kp DOLLAR    &kp PERCENT                                  &kp CARET         &kp AMPS           &kp ASTRK             &trans                 &kp MINUS  &kp EQUAL
&mt LCMD COMMA         &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0                                       &kp LESS_THAN     &kp GREATER_THAN   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMI   &kp BACKSLASH
&mt LEFT_SHIFT PERIOD  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5       &trans  &trans  &trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SLASH  &mt RIGHT_GUI SINGLE_QUOTE
                                                   &trans        &trans        &trans       &trans  &trans  &trans  &trans  &trans            &trans             &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRI_UP C_BRI_DN>;
        };

        adjust {
            bindings = <
&tog 3      &bt BT_DISC 0   &bt BT_DISC 1   &bt BT_DISC 2   &bt BT_DISC 3  &bt BT_DISC 4                                  &kp C_BRIGHTNESS_MINIMUM  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_MAXIMUM  &kp C_BRIGHTNESS_AUTO  &kp C_MUTE
&bt BT_CLR  &bt_sel_os 1 0  &bt_sel_os 0 1  &bt_sel_os 1 2  &bt BT_SEL 3   &bt BT_SEL 4                                   &kp C_PREV                &kp C_PLAY_PAUSE      &kp C_STOP            &kp C_NEXT                &kp C_VOL_DN           &kp C_VOLUME_UP
&trans      &tog 1          &trans          &trans          &trans         &trans         &trans  &trans  &trans  &trans  &trans                    &trans                &trans                &trans                    &trans                 &trans
                                            &trans          &trans         &trans         &trans  &trans  &trans  &trans  &trans                    &trans                &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        lower-mac {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
