/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */

/ {
    macros {
        umlaut_a_big: umlaut_a_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp C &kp KP_NUMBER_4 &kp SPACE>;
            label = "UMLAUT_A_SMALL";
        };

        umlaut_a_small: umlaut_a_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp E &kp KP_NUMBER_4 &kp SPACE>;
            label = "UMLAUT_A_UP";
        };

        umlaut_o_big: umlaut_o_big {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp D &kp KP_NUMBER_6 &kp SPACE>;
            label = "UMLAUT_O_BIG";
        };

        umlaut_o_small: umlaut_o_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp F &kp KP_NUMBER_6 &kp SPACE>;
            label = "UMLAUT_O_SMALL";
        };

        umlaut_u_small: umlaut_u_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp F &kp C &kp SPACE>;
            label = "UMLAUT_U_SMALL";
        };

        umlaut_u_big: umlaut_u_big {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp D &kp C &kp SPACE>;
            label = "UMLAUT_U_BIG";
        };

        umlaut_sz_small: umlaut_sz_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp U &kp D &kp F &kp SPACE>;
            label = "UMLAUT_SZ_SMALL";
        };

        umlaut_sz_big: umlaut_sz_big {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp KP_NUMBER_1 &kp E &kp KP_NUMBER_9 &kp E &kp SPACE>;
            label = "UMLAUT_SZ_BIG";
        };

        bt_sel_os: bt_os {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &to MACRO_PLACEHOLDER &macro_param_2to2 &bt BT_SEL MACRO_PLACEHOLDER>;
            label = "BT_OS";
        };

        umlaut_mac_all: umlaut_mac {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp LA(U) &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "UMLAUT_MAC";
        };
    };

    behaviors {
        umlaut_a: umlaut_a {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_A";
            bindings = <&umlaut_a_big>, <&umlaut_a_small>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        umlaut_o: umlaut_o {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_O";
            bindings = <&umlaut_o_big>, <&umlaut_o_small>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        umlaut_u: umlaut_u {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_U";
            bindings = <&umlaut_u_big>, <&umlaut_u_small>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        umlaut_sz: umlaut_sz {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_SZ";
            bindings = <&umlaut_sz_big>, <&umlaut_sz_small>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        esc_adjust: esc_adjust {
            compatible = "zmk,behavior-tap-dance";
            label = "ESC_ADJUST";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE>, <&none>, <&sl 5>;
        };

        hr_l: hr_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HR_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 34 35 36 37 38 39>;
        };

        hr_r: hr_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HR_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        mt_repeat: mt_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "Mod/tap repeat";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
        };

        umlaut_mac: umlaut_mac {
            compatible = "zmk,behavior-hold-tap";
            label = "UMLAUT_MAC";
            bindings = <&umlaut_mac_all>, <&umlaut_mac_all>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | LAYER 1 | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
&lt 5 ESCAPE        &kp Q  &kp W  &kp E     &kp R         &kp T                                                                                                 &kp Y         &kp U             &kp I              &kp O    &kp P          &kp MINUS
&mt LC(LCMD) GRAVE  &kp A  &kp S  &kp D     &kp F         &kp G                                                                                                 &kp H         &kp J             &kp K              &kp L    &kp SEMICOLON  &kp BACKSLASH
&kp LEFT_CONTROL    &kp Z  &kp X  &kp C     &kp V         &kp B         &sl 4        &sk LC(LEFT_COMMAND)  &sk RC(RIGHT_COMMAND)                   &sl 2        &kp N         &kp M             &kp COMMA          &kp DOT  &kp FSLH       &mt RC(RIGHT_GUI) SINGLE_QUOTE
                                  &sk LCMD  &sk LEFT_ALT  &sk LC(LCMD)  &lt 2 SPACE  &mt LEFT_SHIFT TAB    &mt_repeat RG(RIGHT_CONTROL) BACKSPACE  &lt 4 ENTER  &sk RC(RGUI)  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        base-mac {
            bindings = <
&trans    &trans  &trans  &trans     &trans  &trans                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans    &trans  &trans  &trans     &trans  &trans                                  &trans  &trans  &trans  &trans  &trans  &trans
&kp LCMD  &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                          &sk LCTRL  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        lower {
            bindings = <
&trans                           &trans                                     &trans                                     &trans                                         &trans                                     &trans                                                                                 &umlaut_a 0 0   &umlaut_o 0 0  &umlaut_u 0 0  &umlaut_sz 0 0  &trans           &trans
&trans                           &mt LA(LC(LG(LEFT))) LS(LC(LG(LEFT)))      &mt LA(LC(LG(DOWN))) LC(LG(LS(DOWN)))      &mt LA(LC(LG(UP_ARROW))) LC(LG(LS(UP_ARROW)))  &mt LC(LG(LA(RIGHT))) LC(LG(LS(RIGHT)))    &trans                                                                                 &kp LEFT_ARROW  &kp DOWN       &kp UP_ARROW   &kp RIGHT       &trans           &trans
&mt LC(LG(LS(TAB))) LG(LC(TAB))  &mt LG(LC(LS(NUMBER_1))) LC(LG(NUMBER_1))  &mt LG(LC(LS(NUMBER_2))) LC(LG(NUMBER_2))  &mt LG(LC(LS(NUMBER_3))) LC(LG(NUMBER_3))      &mt LG(LC(LS(NUMBER_4))) LC(LG(NUMBER_4))  &mt LG(LC(LS(S))) LC(LG(S))  &trans  &trans  &kp LC(LG(LS(T)))  &trans                 &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP    &kp END         &kp PRINTSCREEN  &trans
                                                                                                                       &trans                                         &trans                                     &trans                       &trans  &trans  &trans             &kp RG(RC(LS(ENTER)))  &trans          &trans         &trans
            >;
        };

        lower-mac {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                  &umlaut_mac LS(A) A  &umlaut_mac LS(O) O  &umlaut_mac LS(U) U  &kp LA(S)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                  &trans               &trans               &trans               &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans               &trans               &trans               &trans     &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans               &trans               &trans
            >;
        };

        raise {
            bindings = <
&trans      &kp EXCL      &kp AT        &kp POUND     &kp DOLLAR    &kp PERCENT                                  &kp CARET         &kp AMPS           &kp ASTRK             &trans                 &kp MINUS  &kp EQUAL
&kp COMMA   &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0                                       &kp LESS_THAN     &kp GREATER_THAN   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMI   &kp BACKSLASH
&kp PERIOD  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5       &trans  &trans  &trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SLASH  &kp SINGLE_QUOTE
                                        &trans        &trans        &trans       &trans  &trans  &trans  &trans  &trans            &trans             &trans
            >;
        };

        adjust {
            bindings = <
&tog 3      &bt BT_DISC 0   &bt BT_DISC 1   &bt BT_DISC 2   &bt BT_DISC 3  &bt BT_DISC 4                                  &kp C_BRIGHTNESS_MINIMUM  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_MAXIMUM  &kp C_BRIGHTNESS_AUTO  &kp C_MUTE
&bt BT_CLR  &bt_sel_os 1 0  &bt_sel_os 0 1  &bt_sel_os 1 2  &bt BT_SEL 3   &bt BT_SEL 4                                   &kp C_PREV                &kp C_PLAY_PAUSE      &kp C_STOP            &kp C_NEXT                &kp C_VOL_DN           &kp C_VOLUME_UP
&trans      &tog 1          &trans          &trans          &trans         &trans         &trans  &trans  &trans  &trans  &trans                    &trans                &trans                &trans                    &trans                 &trans
                                            &trans          &trans         &trans         &trans  &trans  &trans  &trans  &trans                    &trans                &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        lower-mac {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
